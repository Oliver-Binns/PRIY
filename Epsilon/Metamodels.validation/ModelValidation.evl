context Named{
	constraint Named{
		check: not (self.name == null) 
		message: "Name of " + self.type().name + " must be set."
		fix{
			title: "Set name."
			do{
				self.name = System.user.prompt("Enter a name:");
			}
		}
	}
}

context UniqueNamed{
	constraint UniqueName{
		guard: self.satisfies("Named")
		check: UniqueNamed.allInstances().forAll(n | n.name = self.name implies n = self)
		message: self.type().name + " " + self.name +" must have a unique name."
	}
}

context Agent{
	constraint InitialStateNotNull{
		check: not (self.initialState == null)
		message: "An initial state must be set for Agent " + self.name + "."
		fix{
			title: "Create a new state."
			do{
				var name = System.user.prompt("What should the new state be called?");
				self.initialState = new State;
				self.initialState.name = name;
			}
		}
		fix{
			title: "Select existing state."
			do{
				self.initialState = System.user.choose("Choose a state:", self.states);
			}
		}
	}

	constraint InitialStateMustBelong{
		guard: self.satisfies("InitialStateNotNull")
		check: self.states.contains(self.initialState)
		message: "The initial state of Agent " + self.name + " does not belong to it."
		fix{
			title: "Select a state that belongs to Agent " + self.name
			do{
				self.initialState = System.user.choose("Choose a state:", self.states);
			}
		}
	}
}

context Transition{
	critique StateTransition{
		guard: not (self.initialState == self.nextState)
		check: self.condition.isDefined()
		message: "Transitions that move between states generally require a condition to be met."
		fix{
			title: "Create a new boolean condition for the transition."
			do{
				self.condition = createNewCondition(self.initialState.agent);
			}
		}
	}
}
context Condition{
	constraint LHSValid{
		check: self.lhs.isDefined()
		message: "Left-hand side of an equation must be set."
	}

	constraint RHSValid{
		check: self.lhs.isDefined()
		message: "Right-hand side of an equation must be set."
		
	}
}

context SpatialPartition{
	constraint PartitionSegments{
		check: self.segmentsValid()
		message: "Partitioned space cannot be evenly divided into radius " + self.radius + "."
	}
}

context Layer{
	critique IdenticalLayerOrders{
		check: Layer.allInstances().forAll(r | r.order = self.order implies r = self)
		message: "Layers with identical order should be merged."
		fix{
			title: "Merge all layers with order " + self.order
			do{
				var layersToMerge = Layer.allInstances().select(l | not l = self and l.order = self);
				for(layer in layersToMerge){
					self.functions.addAll(layer.functions);
					delete layer;
				}
			}
		}
	}
}

operation createNewCondition(agent : Agent){
	var con = new Condition;
	con.lhs = createNewEval(agent);
	
	//User will have to manually select this for now-
	var ops = Sequence{
		Operator#Equals,
		Operator#LessThan,
		Operator#LessThanOrEqualTo,
		Operator#GreaterThan,
		Operator#GreaterThanOrEqualTo,
	
		Operator#Plus,
		Operator#Subtract,
		Operator#Multiply,
		Operator#Divide,
		Operator#Modulo
	};
	con.operator = System.user.choose("Select an operator:", ops);
	
	con.rhs = createNewEval(agent);
	
	return con;
}

operation createNewEval(agent : Agent){
	var options = Sequence{"Agent Variable", "Numeric Value", "Condition"};
	var t = System.user.choose("Select type of evaluation: ", options);
	switch (t){
		case "Agent Variable":
			var eval = new VariableEval;
			eval.value = System.user.choose("Which variable should be used?", agent.memory);
			return eval;
		case "Numeric Value":
			var eval = new LiteralEval;
			eval.value = System.user.promptReal("What value should this number be?").asFloat();
			return eval;
		case "Condition":
			var eval = new ConditionEval;
			eval.value = createNewCondition();
			return eval;
	}
}

operation SpatialPartition segmentsValid(){
	if(not ((self.xmax - self.xmin).mod(self.radius) = 0)){
		return false;
	}
	if(not ((self.ymax - self.ymin).mod(self.radius) = 0)){
		return false;
	}
	if(not ((self.zmax - self.zmin).mod(self.radius) = 0)){
		return false;
	}
	return true;
}