<?xml version="1.0" encoding="utf-8"?>
<gpu:xmodel xmlns:gpu="http://www.dcs.shef.ac.uk/~paul/XMMLGPU" xmlns="http://www.dcs.shef.ac.uk/~paul/XMML">
	<name>[%=flame.name%]</name>
	
	<gpu:environment>
		<gpu:constants>
			[%for (variable in flame.variables){%]
				[%=variable.toXML(true)%]
			[%}%]
		</gpu:constants>
		<gpu:functionFiles>
			[%for (file in flame.functionFiles){%]
				<file>[%=file%]</file>
			[%}%]
		</gpu:functionFiles>
		<gpu:initFunctions>
			[%for (func in flame.initFunctions){%]
			<gpu:initFunction>
				<gpu:name>[%=func%]</gpu:name>
			</gpu:initFunction>
			[%}%]
		</gpu:initFunctions>
		<gpu:stepFunctions>
			[%for (func in flame.stepFunctions){%]
			<gpu:stepFunction>
				<gpu:name>[%=func%]</gpu:name>
			</gpu:stepFunction>
			[%}%]
		</gpu:stepFunctions>
	</gpu:environment>
	
	<xagents>
		[%for (agent in flame.agents){%]
		<gpu:xagent>
			<name>[%=agent.name%]</name>
			<description>[%=agent.description%]</description>
			<memory>
				[%for (variable in agent.memory){%]
					[%=variable.toXML(false)%]
				[%}%]
			</memory>
			<functions>
				[%for (state in agent.states){%]
				[%for (transition in state.transitions){%]
				<gpu:function>
					<name>[%=transition.name%]</name>
					<currentState>[%=transition.initialState.name%]</currentState>
					<nextState>[%=transition.nextState.name%]</nextState>
					[%if (not transition.inputs.isEmpty()){%]
					<inputs>
						[%for (input in transition.inputs){%]
						<gpu:input>
							<messageName>[%=input.name%]</messageName>
						</gpu:input>
						[%}%]
					</inputs>
					[%}%]
					[%if (not transition.outputs.isEmpty()){%]
					<outputs>
						[%for (output in transition.outputs){%]
						<gpu:output>
							<messageName>[%=output.name%]</messageName>
							<gpu:type>single_message</gpu:type>
						</gpu:output>
						[%}%]
					</outputs>
					[%}%]
					[%if (not transition.differentiation.isEmpty()){%]
					<xagentOutputs>
						[%for (output in transition.differentiation){%]
						<gpu:xagentOutput>
							<xagentName>[%=output.agent.name%]</xagentName>
							<state>[%=output.state.name%]</state>
						</gpu:xagentOutput>
						[%}%]
					</xagentOutputs>
					[%}
					if(transition.condition.isDefined()){%]
						[%=transition.condition.toXML(agent)%]
					[%}%]
					<gpu:reallocate>[%=transition.reallocate%]</gpu:reallocate>
					<gpu:RNG>[%=transition.randomGenerator%]</gpu:RNG>
				</gpu:function>
				[%}%]
				[%}%]
			</functions>
			<states>
				[%for (state in agent.states){%]
				<gpu:state>
					<name>[%=state.name%]</name>
				</gpu:state>
				[%}%]
				<initialState>[%=agent.initialState.name%]</initialState>
			</states>
			<gpu:type>[%=agent.type.toString().toLowerCase()%]</gpu:type>
			<gpu:bufferSize>[%=agent.bufferSize%]</gpu:bufferSize>
		</gpu:xagent>
		[%}%]
	</xagents>
	
	<messages>
		[%for (message in flame.messages){%]
		<gpu:message>
			<name>[%=message.name%]</name>
			<description>[%=message.description%]</description>
			<variables>
				[%for (variable in message.variables){%]
				<gpu:variable>
					<type>[%=variable.type.toString().toLowerCase()%]</type>
					<name>[%=variable.name%]</name>
				</gpu:variable>
				[%}%]
			</variables>
			[%if(not message.partitioning.isDefined()){%]
			<gpu:partitioningNone/>
			[%}else if(message.partitioning.isTypeOf(DiscretePartition)){%]
			<gpu:partitioningDiscrete>
				<gpu:radius>[%=message.partitioning.radius%]</gpu:radius>
			</gpu:partitioningDiscrete>
			[%}else{
				var partition = message.partitioning;
			%]
			<gpu:partitioningSpatial>
				<gpu:radius>[%=partition.radius%]</gpu:radius>
				<gpu:xmin>[%=partition.xmin%]</gpu:xmin>
				<gpu:xmax>[%=partition.xmax%]</gpu:xmax>
				<gpu:ymin>[%=partition.ymin%]</gpu:ymin>
				<gpu:ymax>[%=partition.ymax%]</gpu:ymax>
				<gpu:zmin>[%=partition.zmin%]</gpu:zmin>
				<gpu:zmax>[%=partition.zmax%]</gpu:zmax>
			</gpu:partitioningSpatial>
			[%}%]
			<gpu:bufferSize>[%=message.bufferSize%]</gpu:bufferSize>
		</gpu:message>
		[%}%]
	</messages>
	
	<layers>
		[%for (layer in flame.layers.sortBy(l | l.order)){%]
		<layer>
			[%for (func in layer.functions){%]
			<gpu:layerFunction>
				<name>[%=func.name%]</name>
			</gpu:layerFunction>
			[%}%]
		</layer>
		[%}%]
	</layers>
</gpu:xmodel>

[%
operation Variable toXML(description: Boolean){
	var output = "<type>" + self.type.toString().toLowerCase() + "</type>";
	output += "<name>" + self.name + "</name>";
	
	if(self.defaultValue.isDefined()){
		output += "<defaultValue>";
		switch(self.type){
			case DataType#Int:
				output += self.defaultValue.floor().toString();
			case DataType#Double:
				output += self.defaultValue.toString();
			case DataType#Float:
				output += self.defaultValue.toString() + "f";
		}
		output += "</defaultValue>";
	}
	
	if(description){
		output += "<description>" + self.description + "</description>";
	}

	return "<gpu:variable>" + output + "</gpu:variable>";
}
operation Condition toXML(agent: Agent){
	var str = "<condition><lhs>" + self.lhs.toXML(agent)
	+ "</lhs><operator>";

	switch(self.operator){
		case Operator#Equals :
			str += "==";
		case Operator#LessThan :
			str += "&lt;";
		case Operator#LessThanOrEqualTo :
			str += "&lt;=";
		case Operator#GreaterThan : 
			str += "&gt;";
		case Operator#GreaterThanOrEqualTo :
			str += "&gt;=";
			
		case Operator#And :
			str += "&amp;&amp;";
		case Operator#Or :
			str += "||";
		case Operator#Not :
			str += "!=";
		
		case Operator#Plus :
			str += "+";
		case Operator#Subtract :	
			str += "-";
		case Operator#Multiply :
			str += "*";
		case Operator#Divide :
			str += "/";
		case Operator#Modulo :
			str += "%";
	}

	str += "</operator><rhs>"
	+ self.rhs.toXML(agent)
	+ "</rhs></condition>";
	return str;
}
operation ConditionEval toXML(agent: Agent){
	return self.value.toXML(agent);
}
operation LiteralEval toXML(agent: Agent){
	var val = self.value;
	if(not self.is_float){
		val = val.floor();
	}
	return "<value>" + val.toString() + "</value>";
}
operation VariableEval toXML(agent: Agent){
	if (agent.memory.contains(self.value)){
		return "<agentVariable>" + self.value.name + "</agentVariable>";
	}
	if (self.value.isDefined()){
		return "<value>" + self.value.name + "</value>";
	}
	return "<value>NULL</value>";
}
%]