@gmf
@namespace(uri="FLAME", prefix="FLAME")
package FLAME;

abstract class Named{
	attr String name;
}

abstract class UniqueNamed extends Named{}

@gmf.diagram
class Simulation extends UniqueNamed{
	val Variable[*] variables;
	attr String[*] functionFiles;
	attr String[*] initFunctions;
	attr String[*] stepFunctions;
	
	val Agent[*] agents;
	val Message[*] messages;
	val Layer[*] layers;
	
	val Partition[*] partitions;
}

enum DataType{
	Int;
	Float;
	Double;
}

@gmf.node(label="name")
class Variable extends Named{
	attr String description;
	attr DataType type;
	attr Float defaultValue;
}


enum AgentType{
	Continuous = 0;
	Discrete = 1;
}

@gmf.node(label="name")
class Agent extends UniqueNamed{
	attr String description;
	
	@gmf.compartment(layout="list")
	val Variable[*] memory;
	
	ref State initialState;
	@gmf.compartment
	val State[+]#agent states;
	@gmf.compartment(layout="list")
	val Differentiation[*] differentiation;
	
	
	attr AgentType type;
	attr Integer bufferSize;
}

@gmf.node(label.placement="none")
class Differentiation{
	ref Agent agent;
	ref State state;
}

@gmf.node(label="name")
class State extends UniqueNamed{
	ref Agent#states agent;
	val Transition[*]#initialState transitions;
}

@gmf.link(label="name", source="initialState", target="nextState", target.decoration="arrow")
class Transition extends UniqueNamed{
	ref Message[*] inputs;
	ref Message[*] outputs;
	ref Differentiation[*] differentiation;
	
	val Condition condition;
	
	attr Boolean reallocate;
	attr Boolean randomGenerator;
	
	ref State#transitions initialState;
	ref State nextState;
}

abstract class Evaluation{}
class LiteralEval extends Evaluation{
	attr Boolean is_float;
	attr Float value;
}
class VariableEval extends Evaluation{
	ref Variable value;
}
class ConditionEval extends Evaluation{
	val Condition value;
}
class Condition{
	val Evaluation lhs;
	attr Operator operator;
	val Evaluation rhs;
}
enum Operator{
	Equals;
	LessThan;
	LessThanOrEqualTo;
	GreaterThan;
	GreaterThanOrEqualTo;
	
	And;
	Or;
	Not;
	
	Plus;
	Subtract;
	Multiply;
	Modulo;
	Divide;
}

@gmf.node(label="name")
class Message extends UniqueNamed{
	attr String description;
	
	@gmf.link(style="dot")
	ref Partition partitioning;
	
	@gmf.compartment(layout="list")
	val Variable[*] variables;
	attr Integer bufferSize;
}

abstract class Partition{
	attr Integer radius;
}

@gmf.node(label="radius")
class SpatialPartition extends Partition{
	attr Integer xmin;
	attr Integer xmax;
	
	attr Integer ymin;
	attr Integer ymax;
	
	attr Integer zmin;
	attr Integer zmax;	
}

@gmf.node(label="radius")
class DiscretePartition extends Partition{}

@gmf.node(label="order")
class Layer{
	attr Integer order;
	ref Transition[*] functions;
}